<!doctype html>
<html>
    <head>
        <meta charset="UTF-8" />
        <title>TEST  phaser!</title>
        <script src="phaser.js"></script>
    </head>
    <body>

    <script type="text/javascript">

    window.onload = function() {

        var game = new Phaser.Game(256, 224, Phaser.AUTO, 'game_div', { preload: preload, create: create, update: update});
		var cursors;
		var map;
		var backgroundLayer;
		var blockedLayer;
		var foregroundLayer;
		var skyLayer;
		var player;
		var isInJump;
		var jumpedLeft;

		var STANDARD_SPEED = 150;
		var STANDARD_GRAVITY = 300;
		var STANDARD_BOUNCE = 0.0;
		var VELOCITY_STOPPED = 0;
		
		
        function preload () {
			cursors = game.input.keyboard.createCursorKeys();
			loadAssets();

        }
		
		function loadAssets(){
			game.load.spritesheet('link', 'assets/debugLink.png', 39, 32);
	
			game.load.image('zelda_16x16', 'assets/zelda_16x16.png');
			game.load.tilemap('parapa_palace', 'assets/tiled/parapa_palace.json', null, Phaser.Tilemap.TILED_JSON);
		};

		
		
        function create () {

			createLayers();
			
			createPlayer();
        }
		
		function createLayers(){
			map = game.add.tilemap('parapa_palace');
			//the first parameter is the tileset name as specified in Tiled, the second is the key to the asset
			map.addTilesetImage('zelda_16x16', 'zelda_16x16');
			//create layer
			skyLayer = map.createLayer('skyLayer');
			backgroundLayer = map.createLayer('backgroundLayer');
			blockedLayer = map.createLayer('blockedLayer');
			//foregroundLayer = map.createLayer('foregroundLayer');
			
			//collision on blockedLayer
			map.setCollisionBetween(1, 100, true, 'blockedLayer');
			
			
		
			//  Resize the world
			backgroundLayer.resizeWorld();
			
			
			
            //  We're going to be using physics, so enable the Arcade Physics system
			game.physics.startSystem(Phaser.Physics.ARCADE);

			//  A simple background for our game


			//  The platforms group contains the ground and the 2 ledges we can jump on
			//platforms = game.add.group();

			//  We will enable physics for any object that is created in this group
			//platforms.enableBody = true;

			// Here we create the ground.
			//var ground = platforms.create(0, game.world.height - 64, 'ground');

			//  Scale it to fit the width of the game (the original sprite is 400x32 in size)
			//ground.scale.setTo(2, 2);

			//  This stops it from falling away when you jump on it
			//ground.body.immovable = true;

			//  Now let's create two ledges
			//var ledge = platforms.create(400, 400, 'ground');

			//ledge.body.immovable = true;

			//ledge = platforms.create(-150, 250, 'ground');

			//ledge.body.immovable = true;
		};
		
		function createPlayer(){
					// The player and its settings
			player = game.add.sprite(16, 32, 'link');
			

			//  We need to enable physics on the player
			game.physics.arcade.enable(player);
			

			//  Player physics properties. Give the little guy a slight bounce.
			player.body.bounce.y = STANDARD_BOUNCE;
			player.body.gravity.y = STANDARD_GRAVITY;
			player.body.collideWorldBounds = true;

			//  Our two animations, walking left and right.
			player.animations.add('left', [0, 1, 2, 3], 10, true);
			player.animations.add('right', [4, 5, 6, 7], 10, true);
			player.animations.add('jump_left', [9,9,3],10, true);
			player.animations.add('jump_right', [14,14,4], 10, true);
			
		};
		
		function update() {
			game.physics.arcade.collide(player, blockedLayer);
			var isAirborne = !player.body.blocked.down;=
			if(isAirborne = false){
				isInJump = false;
			}
			
			if(isInJump){
				if(jumpedLeft){
					player.body
				}
			}
			//  Collide the player and the stars with the platforms
			
	

			if (cursors.left.isDown )
			{
				//  Move to the left
				if(!isAirborne){
					player.body.velocity.x = -STANDARD_SPEED;
					player.animations.play('left');
				}

			}
			else if (cursors.right.isDown)
			{
				//  Move to the right
				if(!isAirborne){
					player.body.velocity.x = STANDARD_SPEED;
					player.animations.play('right');
				}
			}
			else
			{
				var frameToSet = 4;
				if(player.animations.currentAnim.name == 'left'){
					frameToSet = 3;
				}
				player.animations.stop();
				//  Stand still

				player.frame = frameToSet;
			}
    
			//  Allow the player to jump if they are touching the ground.
			
			
			if (cursors.up.isDown && !isAirborne)
			{
				
				player.animations.stop();
				var facingLeft = player.animations.currentAnim.name == 'left';
				if(facingLeft){
					player.animations.play('jump_left');
					
				}else{
					player.animations.play('jump_right');
					
				}
				if(cursors.left.isDown){
					player.body.velocity.x = -STANDARD_SPEED;
					jumpedLeft = true;
				}
				if(cursors.right.isDown){
					player.body.velocity.x = STANDARD_SPEED;
					jumpedLeft = false;
				}
				player.body.velocity.y = -STANDARD_SPEED;
				
				
			}
		}
    };

    </script>
	
	<h1>
		Game Test Page
		<h1>
	<div id='game_div'>
		
	</div>
    </body>
</html>

